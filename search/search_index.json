{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Hackathon Documentation","text":"<p>This site contains the documentation automatically generated from our sample-project code.</p> <p>Use the navigation bar on the left to view the functions in <code>main.py</code> and <code>utils.py</code>.</p>"},{"location":"main/","title":"main.py","text":""},{"location":"main/#documentation-mainpy","title":"\ud83d\udcc4 Documentation \u2013 <code>main.py</code>","text":""},{"location":"main/#overview","title":"Overview","text":"<p><code>main.py</code> provides two small, self\u2011contained utility functions that are useful in many introductory programming, data\u2011analysis, or hackathon projects:</p> Function Purpose <code>calculate_area</code> Computes the area of a rectangle given its <code>length</code> and <code>width</code>. <code>is_positive</code> Determines whether an integer is strictly greater than zero. <p>Both functions are type\u2011annotated and include comprehensive docstrings, making them ready for static analysis tools (e.g., <code>mypy</code>, <code>pylint</code>) and IDE autocompletion.</p>"},{"location":"main/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Installation &amp; Usage </li> <li>Function Reference </li> <li><code>calculate_area</code> </li> <li><code>is_positive</code> </li> <li>Examples </li> <li>Testing </li> <li>Contributing </li> <li>License </li> </ol>"},{"location":"main/#installation-usage","title":"Installation &amp; Usage","text":"<p>The module does not have external dependencies, so you can simply copy <code>main.py</code> into your project or install it as part of a package.</p> <pre><code># Option 1 \u2013 copy the file\ncp path/to/main.py your_project/\n\n# Option 2 \u2013 import from a package (if you structure it as a package)\npip install -e .\n</code></pre> <p>Then import the functions in your Python code:</p> <pre><code>from main import calculate_area, is_positive\n</code></pre> <p>Note: The file assumes a normal Python package layout. If you are running a generator script from a different working directory, ensure the import path is adjusted accordingly (e.g., using relative imports or modifying <code>sys.path</code>).</p>"},{"location":"main/#function-reference","title":"Function Reference","text":""},{"location":"main/#calculate_area","title":"<code>calculate_area</code>","text":"<pre><code>def calculate_area(length: float, width: float) -&gt; float:\n    \"\"\"\n    Computes the area of a rectangle.\n\n    :param length: The length of the rectangle.\n    :param width: The width of the rectangle.\n    :return: The calculated area.\n    \"\"\"\n</code></pre> <p>Description Returns the product of <code>length</code> and <code>width</code>, which is the geometric area of a rectangle.</p> Parameter Type Description <code>length</code> <code>float</code> Length of the rectangle (must be non\u2011negative for a valid shape). <code>width</code> <code>float</code> Width of the rectangle (must be non\u2011negative for a valid shape). <p>Return value <code>float</code> \u2013 the computed area (<code>length * width</code>).</p> <p>Raises No explicit exceptions are raised; however, passing non\u2011numeric types will result in a <code>TypeError</code> from Python\u2019s arithmetic operator.</p>"},{"location":"main/#is_positive","title":"<code>is_positive</code>","text":"<pre><code>def is_positive(number: int) -&gt; bool:\n    \"\"\"\n    Checks if a given number is strictly positive.\n\n    :param number: The integer to check.\n    :return: True if the number is greater than 0, False otherwise.\n    \"\"\"\n</code></pre> <p>Description Evaluates whether <code>number</code> is greater than zero.</p> Parameter Type Description <code>number</code> <code>int</code> Integer to test. <p>Return value <code>bool</code> \u2013 <code>True</code> if <code>number &gt; 0</code>, otherwise <code>False</code>.</p> <p>Raises No explicit exceptions are raised; passing a non\u2011integer triggers a <code>TypeError</code> at runtime when the comparison is performed.</p>"},{"location":"main/#examples","title":"Examples","text":""},{"location":"main/#basic-usage","title":"Basic usage","text":"<pre><code>from main import calculate_area, is_positive\n\n# 1\ufe0f\u20e3 Compute a rectangle area\narea = calculate_area(5.0, 3.2)   # \u2192 16.0\nprint(f\"The rectangle's area is {area}\")\n\n# 2\ufe0f\u20e3 Check positivity\nprint(is_positive(10))   # \u2192 True\nprint(is_positive(-4))   # \u2192 False\n</code></pre>"},{"location":"main/#edge-cases","title":"Edge cases","text":"<pre><code># Zero dimensions are mathematically valid (area = 0)\nassert calculate_area(0, 10) == 0\n\n# Negative width/length still returns a numeric result,\n# but you may want to guard against it in production code.\nassert calculate_area(-2, 5) == -10\n</code></pre>"},{"location":"main/#integration-in-a-larger-script","title":"Integration in a larger script","text":"<pre><code>def process_rectangle(dimensions: tuple[float, float]) -&gt; str:\n    length, width = dimensions\n    if length &lt; 0 or width &lt; 0:\n        return \"Invalid dimensions: lengths must be non\u2011negative.\"\n    area = calculate_area(length, width)\n    return f\"The area of the {length}\u00d7{width} rectangle is {area}.\"\n</code></pre>"},{"location":"main/#testing","title":"Testing","text":"<p>Simple unit tests can be written with <code>unittest</code> or <code>pytest</code>. Below is a minimal example using <code>pytest</code>:</p> <pre><code># test_main.py\nimport pytest\nfrom main import calculate_area, is_positive\n\ndef test_calculate_area():\n    assert calculate_area(2.0, 3.0) == 6.0\n    assert calculate_area(0, 5) == 0\n    assert calculate_area(-1, 4) == -4   # demonstrates no validation inside the function\n\ndef test_is_positive():\n    assert is_positive(5) is True\n    assert is_positive(0) is False\n    assert is_positive(-3) is False\n</code></pre> <p>Run the tests:</p> <pre><code>pytest -q\n</code></pre> <p>All tests should pass, confirming the expected behaviour.</p>"},{"location":"main/#contributing","title":"Contributing","text":"<p>Contributions are welcome! Follow these steps:</p> <ol> <li>Fork the repository.</li> <li>Create a feature branch (<code>git checkout -b feature/your-feature</code>).</li> <li>Write clean, type\u2011annotated code and update documentation accordingly.</li> <li>Add tests for new functionality.</li> <li>Submit a pull request with a concise description of the changes.</li> </ol> <p>Please adhere to the existing docstring style and keep the module free of external dependencies unless absolutely necessary.</p>"},{"location":"main/#license","title":"License","text":"<p>This module is released under the MIT License \u2013 a permissive, open\u2011source license. See the <code>LICENSE</code> file for full terms.</p> <p>Generated by an automated documentation assistant. For any questions or suggestions, feel free to open an issue or contact the maintainer.</p>"},{"location":"utils/","title":"utils.py","text":""},{"location":"utils/#python-utility-module-documentation","title":"\ud83d\udcda Python Utility Module Documentation","text":"<p>This module provides two small, well\u2011typed helper functions:</p> Function Purpose <code>add</code> Computes the arithmetic sum of two integers. <code>get_user_greeting</code> Generates a friendly, personalised greeting string."},{"location":"utils/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Installation &amp; Import </li> <li>Function Reference </li> <li>add </li> <li>get_user_greeting </li> <li>Examples </li> <li>Testing Tips </li> <li>Changelog </li> </ol>"},{"location":"utils/#installation-import","title":"Installation &amp; Import","text":"<p>The code lives in a regular Python file (e.g., <code>utils.py</code>). You can import the functions directly:</p> <pre><code>from utils import add, get_user_greeting\n</code></pre> <p>No external dependencies are required\u2014both functions rely solely on the Python standard library.</p>"},{"location":"utils/#function-reference","title":"Function Reference","text":""},{"location":"utils/#add","title":"<code>add</code>","text":"<pre><code>def add(a: int, b: int) -&gt; int:\n    \"\"\"\n    Calculates the sum of two integer values.\n\n    :param a: The first integer.\n    :param b: The second integer.\n    :return: The sum of a and b.\n    \"\"\"\n    return a + b\n</code></pre>"},{"location":"utils/#description","title":"Description","text":"<p>Returns the arithmetic sum of <code>a</code> and <code>b</code>. Both arguments must be integers; a <code>TypeError</code> will be raised automatically by Python if non\u2011integers are supplied.</p>"},{"location":"utils/#parameters","title":"Parameters","text":"Name Type Description <code>a</code> <code>int</code> First addend. <code>b</code> <code>int</code> Second addend."},{"location":"utils/#returns","title":"Returns","text":"Type Description <code>int</code> The result of <code>a + b</code>."},{"location":"utils/#example","title":"Example","text":"<pre><code>&gt;&gt;&gt; add(3, 7)\n10\n&gt;&gt;&gt; add(-5, 12)\n7\n</code></pre>"},{"location":"utils/#get_user_greeting","title":"<code>get_user_greeting</code>","text":"<pre><code>def get_user_greeting(username: str) -&gt; str:\n    \"\"\"\n    Generates a personalized greeting message for a user.\n\n    :param username: The name of the user.\n    :return: A greeting string, e.g., \"Hello, [username]!\".\n    \"\"\"\n    return f\"Hello, {username}!\"\n</code></pre>"},{"location":"utils/#description_1","title":"Description","text":"<p>Builds a simple, human\u2011readable greeting that incorporates the supplied <code>username</code>. The function expects a string and returns a string formatted as <code>\"Hello, &lt;username&gt;!\"</code>.</p>"},{"location":"utils/#parameters_1","title":"Parameters","text":"Name Type Description <code>username</code> <code>str</code> The user\u2019s name (any non\u2011empty string)."},{"location":"utils/#returns_1","title":"Returns","text":"Type Description <code>str</code> A greeting such as <code>\"Hello, Alice!\"</code>."},{"location":"utils/#example_1","title":"Example","text":"<pre><code>&gt;&gt;&gt; get_user_greeting(\"Alice\")\n'Hello, Alice!'\n&gt;&gt;&gt; get_user_greeting(\"Bob\")\n'Hello, Bob!'\n</code></pre>"},{"location":"utils/#examples","title":"Examples","text":"<p>Below is a short script that demonstrates both utilities together:</p> <pre><code>from utils import add, get_user_greeting\n\ndef main():\n    # Example 1: Simple addition\n    x, y = 15, 27\n    total = add(x, y)\n    print(f\"{x} + {y} = {total}\")\n\n    # Example 2: Greeting a user\n    name = \"Charlie\"\n    greeting = get_user_greeting(name)\n    print(greeting)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Expected output</p> <pre><code>15 + 27 = 42\nHello, Charlie!\n</code></pre>"},{"location":"utils/#testing-tips","title":"Testing Tips","text":"<p>A minimal test suite can be written with <code>pytest</code>:</p> <pre><code>import pytest\nfrom utils import add, get_user_greeting\n\ndef test_add():\n    assert add(1, 2) == 3\n    assert add(-5, 5) == 0\n    assert add(0, 0) == 0\n\ndef test_get_user_greeting():\n    assert get_user_greeting(\"Ada\") == \"Hello, Ada!\"\n    assert get_user_greeting(\"\") == \"Hello, !\"\n</code></pre> <p>Run the tests:</p> <pre><code>pytest test_utils.py\n</code></pre>"},{"location":"utils/#changelog","title":"Changelog","text":"Version Date Changes 1.0.0 2025\u201110\u201104 Initial release with <code>add</code> and <code>get_user_greeting</code>. <p>Prepared by the documentation generator \u2013 concise, type\u2011safe, and ready for integration.</p>"}]}